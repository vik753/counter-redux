{"version":3,"sources":["App.js","redux/counter/counterActions.js","redux/actionTypes.js","redux/todo/todoActions.js","serviceWorker.js","redux/counter/counterReducer.js","redux/todo/todoReducer.js","redux/rootReducer.js","index.js"],"names":["App","state","setValue","asyncTimeout","timer","timerGoing","asyncInterval","newTodo","todoText","done","created","Date","now","handleAddNewTodoClick","e","trim","length","newTodoInput","document","getElementById","props","addNewTodo","setState","value","startTimer","setInterval","this","clearInterval","style","width","maxWidth","margin","textAlign","className","counter","marginRight","onClick","addCount","subtractCount","resetCount","htmlFor","id","type","onInput","target","defaultValue","setCount","marginTop","step","setCountAsync","disabled","border","padding","listStyle","Object","values","todos","map","todo","index","key","display","justifyContent","borderRadius","marginBottom","React","Component","connect","counterReducer","todoReducer","dispatch","timeout","setTimeout","Math","random","addTodo","Boolean","window","location","hostname","match","initialState","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","next","result","console","log","getState","reduxThunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99af5632.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addCount,\r\n  resetCount,\r\n  setCount,\r\n  setCountAsync,\r\n  subtractCount,\r\n} from \"./redux/counter/counterActions\";\r\nimport { addTodo } from \"./redux/todo/todoActions\";\r\nimport \"./css/app.scss\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    setValue: 0,\r\n    asyncTimeout: 1000,\r\n    timer: 0,\r\n    timerGoing: false,\r\n    asyncInterval: \"\",\r\n    newTodo: {\r\n      todoText: \"\",\r\n      done: false,\r\n      created: Date.now(),\r\n    },\r\n  };\r\n\r\n  handleAddNewTodoClick = (e) => {\r\n    if (!this.state.newTodo.todoText.trim().length) return;\r\n    const newTodoInput = document.getElementById(\"addTodo\");\r\n    this.props.addNewTodo(this.state.newTodo);\r\n    this.setState({\r\n      newTodo: {\r\n        todoText: \"\",\r\n        done: false,\r\n        created: Date.now(),\r\n      },\r\n    });\r\n    newTodoInput.value = \"\";\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.setState(() => ({ timerGoing: true }));\r\n    // eslint-disable-next-line no-unused-vars\r\n    const asyncInterval = setInterval(() => {\r\n      this.setState(() => ({\r\n        timer: this.state.timer + 1,\r\n        asyncInterval,\r\n      }));\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    //check timer\r\n    if (\r\n      this.state.timer > this.state.asyncTimeout / 1000 &&\r\n      this.state.timerGoing\r\n    ) {\r\n      clearInterval(this.state.asyncInterval);\r\n      this.setState(() => ({ timerGoing: false, timer: 0 }));\r\n    }\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          maxWidth: \"600px\",\r\n          margin: \"0 auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <div className=\"counter-wrapper\">\r\n          <h1>React-Redux counter</h1>\r\n          <h3>Counter: {this.props.counter}</h3>\r\n          <button className=\"btn\" style={{ marginRight: \"4px\" }} onClick={this.props.addCount}>\r\n            Add\r\n          </button>\r\n          <button\r\n            className=\"btn\"\r\n            style={{ marginRight: \"4px\" }}\r\n            onClick={this.props.subtractCount}\r\n          >\r\n            Subtract\r\n          </button>\r\n          <button className=\"btn\" onClick={this.props.resetCount}>Reset</button>\r\n          <br />\r\n          <br />\r\n          <div>\r\n            <label htmlFor=\"setValue\" style={{ marginRight: \"4px\" }}>\r\n              Set value:\r\n            </label>\r\n            <input\r\n              style={{ maxWidth: \"80px\" }}\r\n              id=\"setValue\"\r\n              type=\"number\"\r\n              onInput={(e) => this.setState({ setValue: +e.target.value })}\r\n              defaultValue={this.state.setValue}\r\n            />\r\n            <button className=\"btn\" onClick={() => this.props.setCount(this.state.setValue)}>\r\n              Set value\r\n            </button>\r\n          </div>\r\n          <div style={{ marginTop: \"11px\" }}>\r\n            <label htmlFor=\"setValueAsync\" style={{ marginRight: \"4px\" }}>\r\n              Set async time \"seconds\":\r\n            </label>\r\n            <input\r\n              style={{ maxWidth: \"40px\", marginRight: \"4px\" }}\r\n              step=\"1\"\r\n              id=\"setValueAsync\"\r\n              type=\"number\"\r\n              onInput={(e) =>\r\n                this.setState({ asyncTimeout: +e.target.value * 1000 })\r\n              }\r\n              defaultValue={+this.state.asyncTimeout / 1000}\r\n            />\r\n            <button\r\n              className=\"btn\"\r\n              onClick={() => {\r\n                this.startTimer();\r\n                this.props.setCountAsync(\r\n                  this.state.setValue,\r\n                  this.state.asyncTimeout\r\n                );\r\n              }}\r\n              disabled={this.state.timerGoing}\r\n              style={{}}\r\n            >\r\n              {this.state.timerGoing ? (\r\n                <span>{this.state.asyncTimeout / 1000 - this.state.timer}</span>\r\n              ) : (\r\n                <span>Set value async</span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/*  counter-wrapper */}\r\n        <br />\r\n        <hr />\r\n        <div\r\n          className=\"todo-wrapper\"\r\n          style={{\r\n            border: \"1px solid #e2e2e2\",\r\n            padding: 11,\r\n            margin: \"11px auto\",\r\n          }}\r\n        >\r\n          <h1>Todos</h1>\r\n          <div>\r\n            <label htmlFor=\"addTodo\">Add todo:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"addTodo\"\r\n              defaultValue={this.state.newTodo.todoText}\r\n              onInput={(e) =>\r\n                this.setState({\r\n                  newTodo: {\r\n                    ...this.state.newTodo,\r\n                    todoText: e.target.value,\r\n                  },\r\n                })\r\n              }\r\n            />\r\n            <button className=\"btn\" onClick={this.handleAddNewTodoClick}>Add new note</button>\r\n          </div>\r\n        </div>\r\n        <div style={{ textAlign: \"left\" }}>\r\n          <ul\r\n            style={{\r\n              listStyle: \"none\",\r\n              margin: \"0\",\r\n              padding: \"0\",\r\n            }}\r\n          >\r\n            {Object.values(this.props.todos).length\r\n              ? Object.values(this.props.todos).map((todo, index) => {\r\n                  return (\r\n                    <li\r\n                      key={index}\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        border: \"1px solid #e2e2e2\",\r\n                        padding: \"4px\",\r\n                        borderRadius: \"4px\",\r\n                        marginBottom: \"4px\",\r\n                      }}\r\n                    >\r\n                      <span>{todo.todoText}</span>\r\n                      <span>{todo.done ? \"done\" : \"undone\"}</span>\r\n                    </li>\r\n                  );\r\n                })\r\n              : \"You haven't any todo...\"}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  counter: state.counterReducer.counter,\r\n  todos: state.todoReducer.todos,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  //counter\r\n  addCount: () => dispatch(addCount()),\r\n  subtractCount: () => dispatch(subtractCount()),\r\n  resetCount: () => dispatch(resetCount()),\r\n  setCount: (value) => dispatch(setCount(value)),\r\n  setCountAsync: (value, timeout) => dispatch(setCountAsync(value, timeout)),\r\n  //todos\r\n  addNewTodo: (todo) => dispatch(addTodo(todo)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { ADD, SUBTRACT, RESET, SET } from \"../actionTypes\";\r\n\r\nconst addCount = () => ({ type: ADD });\r\nconst subtractCount = () => ({ type: SUBTRACT });\r\nconst resetCount = () => ({ type: RESET });\r\nconst setCount = (value) => ({ type: SET, value });\r\nconst setCountAsync = (value, timeout) => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch({ type: SET, value });\r\n  }, timeout);\r\n};\r\n\r\nexport { addCount, subtractCount, resetCount, setCount, setCountAsync };\r\n","/* Counters Action Types */\r\nconst ADD = \"ADD\";\r\nconst SUBTRACT = \"SUBTRACT\";\r\nconst RESET = \"RESET\";\r\nconst SET = \"SET\";\r\n\r\n/* Todos Action Types */\r\nconst ADD_TODO = \"ADD_TODO\";\r\n\r\nexport { ADD, SUBTRACT, RESET, SET, ADD_TODO };\r\n","import {ADD_TODO} from \"../actionTypes\";\r\n\r\nconst addTodo = (todo) => {\r\n  todo.id = `${Math.random()}-${todo.created}`;\r\n  return {\r\n    type: ADD_TODO,\r\n    todo,\r\n  };\r\n};\r\n\r\nexport { addTodo };\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n  counter: 0,\r\n};\r\n\r\nexport default function counterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      return {\r\n        counter: state.counter + 1,\r\n      };\r\n    case \"SUBTRACT\":\r\n      return {\r\n        counter: state.counter - 1,\r\n      };\r\n    case \"RESET\":\r\n      return {\r\n        counter: 0,\r\n      };\r\n      case \"SET\":\r\n      return {\r\n        counter: action.value,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  todos: {},\r\n};\r\n\r\nexport default function todoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return {\r\n        todos: {\r\n          ...state.todos,\r\n          [action.todo.id]: action.todo,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport counterReducer from \"./counter/counterReducer\";\r\nimport todoReducer from \"./todo/todoReducer\";\r\n\r\nexport default combineReducers({\r\n  counterReducer,\r\n  todoReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from \"./redux/rootReducer\";\r\n\r\n/*\r\nhttps://github.com/zalmoxisus/redux-devtools-extension#usage\r\nUse redux-devtools-extension package from npm\r\nTo make things easier, there's an npm package to install:\r\n\r\nnpm install --save redux-devtools-extension\r\n\r\nand to use like so:\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(\r\n  applyMiddleware(...middleware),\r\n  // other store enhancers if any\r\n));\r\n*/\r\n\r\nconst logger = (store) => (next) => (action) => {\r\n  const result = next(action);\r\n  console.log(\"Logger-Action: \", action);\r\n  console.log(\"Logger-Store: \", store.getState());\r\n  return result;\r\n};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger, reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}